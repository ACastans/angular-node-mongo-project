serveur connecté
serveur connecté
serveur connecté
{ highWaterMark: 16384,
  buffer: [],
  length: 0,
  pipes: null,
  pipesCount: 0,
  flowing: false,
  ended: false,
  endEmitted: false,
  reading: false,
  calledRead: false,
  sync: true,
  needReadable: false,
  emittedReadable: false,
  readableListening: false,
  objectMode: false,
  defaultEncoding: 'utf8',
  ranOut: false,
  awaitDrain: 0,
  readingMore: false,
  decoder: null,
  encoding: null } ':' '_readableState'
true ':' 'readable'
null ':' 'domain'
{} ':' '_events'
10 ':' '_maxListeners'
{ _connecting: false,
  _handle: 
   { fd: 17,
     writeQueueSize: 0,
     owner: [Circular],
     onread: [Function: onread],
     reading: true },
  _readableState: 
   { highWaterMark: 16384,
     buffer: [],
     length: 0,
     pipes: null,
     pipesCount: 0,
     flowing: false,
     ended: false,
     endEmitted: false,
     reading: true,
     calledRead: true,
     sync: false,
     needReadable: true,
     emittedReadable: false,
     readableListening: false,
     objectMode: false,
     defaultEncoding: 'utf8',
     ranOut: false,
     awaitDrain: 0,
     readingMore: false,
     decoder: null,
     encoding: null },
  readable: true,
  domain: null,
  _events: 
   { end: { [Function: g] listener: [Function: onend] },
     finish: [Function: onSocketFinish],
     _socketEnd: [Function: onSocketEnd],
     drain: [ [Function: ondrain], [Function: socketOnDrain] ],
     timeout: [Function],
     error: [Function],
     close: 
      [ [Function: serverSocketCloseListener],
        [Function: onServerResponseClose] ] },
  _maxListeners: 10,
  _writableState: 
   { highWaterMark: 16384,
     objectMode: false,
     needDrain: false,
     ending: false,
     ended: false,
     finished: false,
     decodeStrings: false,
     defaultEncoding: 'utf8',
     length: 0,
     writing: false,
     sync: true,
     bufferProcessing: false,
     onwrite: [Function],
     writecb: null,
     writelen: 0,
     buffer: [] },
  writable: true,
  allowHalfOpen: true,
  onend: [Function],
  destroyed: false,
  errorEmitted: false,
  bytesRead: 637,
  _bytesDispatched: 0,
  _pendingData: null,
  _pendingEncoding: '',
  server: 
   { domain: null,
     _events: 
      { request: [Function],
        connection: [Function: connectionListener],
        clientError: [Function] },
     _maxListeners: 10,
     _connections: 2,
     connections: [Getter/Setter],
     _handle: 
      { fd: 11,
        writeQueueSize: 0,
        onconnection: [Function: onconnection],
        owner: [Circular] },
     _usingSlaves: false,
     _slaves: [],
     allowHalfOpen: true,
     httpAllowHalfOpen: false,
     timeout: 120000,
     _connectionKey: '4:0.0.0.0:8001' },
  _idleTimeout: 120000,
  _idleNext: 
   { _connecting: false,
     _handle: 
      { fd: 12,
        writeQueueSize: 0,
        owner: [Circular],
        onread: [Function: onread],
        reading: true },
     _readableState: 
      { highWaterMark: 16384,
        buffer: [],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: false,
        ended: false,
        endEmitted: false,
        reading: true,
        calledRead: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        objectMode: false,
        defaultEncoding: 'utf8',
        ranOut: false,
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: 
      { end: [Object],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Object],
        timeout: [Function],
        error: [Function],
        close: [Object] },
     _maxListeners: 10,
     _writableState: 
      { highWaterMark: 16384,
        objectMode: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        buffer: [] },
     writable: true,
     allowHalfOpen: true,
     onend: [Function],
     destroyed: false,
     errorEmitted: false,
     bytesRead: 977,
     _bytesDispatched: 422,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      { domain: null,
        _events: [Object],
        _maxListeners: 10,
        _connections: 2,
        connections: [Getter/Setter],
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        allowHalfOpen: true,
        httpAllowHalfOpen: false,
        timeout: 120000,
        _connectionKey: '4:0.0.0.0:8001' },
     _idleTimeout: 120000,
     _idleNext: 
      { [Function: utcDate]
        _onTimeout: [Function],
        _idleTimeout: 669,
        _idleNext: [Object],
        _idlePrev: [Circular],
        _idleStart: 1412330012332 },
     _idlePrev: [Circular],
     _idleStart: 1412330012387,
     parser: 
      { _headers: [],
        _url: '',
        onHeaders: [Function: parserOnHeaders],
        onHeadersComplete: [Function: parserOnHeadersComplete],
        onBody: [Function: parserOnBody],
        onMessageComplete: [Function: parserOnMessageComplete],
        socket: [Circular],
        incoming: [Object],
        maxHeaderPairs: 2000,
        onIncoming: [Function] },
     ondata: [Function],
     _paused: false,
     _httpMessage: 
      { domain: null,
        _events: [Object],
        _maxListeners: 10,
        output: [],
        outputEncodings: [],
        writable: true,
        _last: false,
        chunkedEncoding: false,
        shouldKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _headerSent: false,
        _header: '',
        _hasBody: true,
        _trailer: '',
        finished: false,
        _hangupClose: false,
        socket: [Circular],
        connection: [Circular],
        _headers: [Object],
        _headerNames: [Object] } },
  _idlePrev: 
   { _idleNext: [Circular],
     _idlePrev: 
      { [Function: utcDate]
        _onTimeout: [Function],
        _idleTimeout: 669,
        _idleNext: [Circular],
        _idlePrev: [Object],
        _idleStart: 1412330012332 } },
  _idleStart: 1412330012390,
  parser: 
   { _headers: [],
     _url: '',
     onHeaders: [Function: parserOnHeaders],
     onHeadersComplete: [Function: parserOnHeadersComplete],
     onBody: [Function: parserOnBody],
     onMessageComplete: [Function: parserOnMessageComplete],
     socket: [Circular],
     incoming: 
      { _readableState: [Object],
        readable: true,
        domain: null,
        _events: {},
        _maxListeners: 10,
        socket: [Circular],
        connection: [Circular],
        httpVersion: '1.1',
        complete: false,
        headers: [Object],
        trailers: {},
        _pendings: [],
        _pendingIndex: 0,
        url: '/bookmarks',
        method: 'POST',
        statusCode: null,
        client: [Circular],
        _consuming: false,
        _dumped: false,
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        upgrade: false },
     maxHeaderPairs: 2000,
     onIncoming: [Function] },
  ondata: [Function],
  _paused: false,
  _httpMessage: 
   { domain: null,
     _events: { finish: [Function] },
     _maxListeners: 10,
     output: [],
     outputEncodings: [],
     writable: true,
     _last: false,
     chunkedEncoding: false,
     shouldKeepAlive: true,
     useChunkedEncodingByDefault: true,
     sendDate: true,
     _headerSent: false,
     _header: '',
     _hasBody: true,
     _trailer: '',
     finished: false,
     _hangupClose: false,
     socket: [Circular],
     connection: [Circular],
     _headers: { 'access-control-allow-origin': '*' },
     _headerNames: { 'access-control-allow-origin': 'Access-Control-Allow-Origin' } } } ':' 'socket'
{ _connecting: false,
  _handle: 
   { fd: 17,
     writeQueueSize: 0,
     owner: [Circular],
     onread: [Function: onread],
     reading: true },
  _readableState: 
   { highWaterMark: 16384,
     buffer: [],
     length: 0,
     pipes: null,
     pipesCount: 0,
     flowing: false,
     ended: false,
     endEmitted: false,
     reading: true,
     calledRead: true,
     sync: false,
     needReadable: true,
     emittedReadable: false,
     readableListening: false,
     objectMode: false,
     defaultEncoding: 'utf8',
     ranOut: false,
     awaitDrain: 0,
     readingMore: false,
     decoder: null,
     encoding: null },
  readable: true,
  domain: null,
  _events: 
   { end: { [Function: g] listener: [Function: onend] },
     finish: [Function: onSocketFinish],
     _socketEnd: [Function: onSocketEnd],
     drain: [ [Function: ondrain], [Function: socketOnDrain] ],
     timeout: [Function],
     error: [Function],
     close: 
      [ [Function: serverSocketCloseListener],
        [Function: onServerResponseClose] ] },
  _maxListeners: 10,
  _writableState: 
   { highWaterMark: 16384,
     objectMode: false,
     needDrain: false,
     ending: false,
     ended: false,
     finished: false,
     decodeStrings: false,
     defaultEncoding: 'utf8',
     length: 0,
     writing: false,
     sync: true,
     bufferProcessing: false,
     onwrite: [Function],
     writecb: null,
     writelen: 0,
     buffer: [] },
  writable: true,
  allowHalfOpen: true,
  onend: [Function],
  destroyed: false,
  errorEmitted: false,
  bytesRead: 637,
  _bytesDispatched: 0,
  _pendingData: null,
  _pendingEncoding: '',
  server: 
   { domain: null,
     _events: 
      { request: [Function],
        connection: [Function: connectionListener],
        clientError: [Function] },
     _maxListeners: 10,
     _connections: 2,
     connections: [Getter/Setter],
     _handle: 
      { fd: 11,
        writeQueueSize: 0,
        onconnection: [Function: onconnection],
        owner: [Circular] },
     _usingSlaves: false,
     _slaves: [],
     allowHalfOpen: true,
     httpAllowHalfOpen: false,
     timeout: 120000,
     _connectionKey: '4:0.0.0.0:8001' },
  _idleTimeout: 120000,
  _idleNext: 
   { _connecting: false,
     _handle: 
      { fd: 12,
        writeQueueSize: 0,
        owner: [Circular],
        onread: [Function: onread],
        reading: true },
     _readableState: 
      { highWaterMark: 16384,
        buffer: [],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: false,
        ended: false,
        endEmitted: false,
        reading: true,
        calledRead: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        objectMode: false,
        defaultEncoding: 'utf8',
        ranOut: false,
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: 
      { end: [Object],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Object],
        timeout: [Function],
        error: [Function],
        close: [Object] },
     _maxListeners: 10,
     _writableState: 
      { highWaterMark: 16384,
        objectMode: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        buffer: [] },
     writable: true,
     allowHalfOpen: true,
     onend: [Function],
     destroyed: false,
     errorEmitted: false,
     bytesRead: 977,
     _bytesDispatched: 422,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      { domain: null,
        _events: [Object],
        _maxListeners: 10,
        _connections: 2,
        connections: [Getter/Setter],
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        allowHalfOpen: true,
        httpAllowHalfOpen: false,
        timeout: 120000,
        _connectionKey: '4:0.0.0.0:8001' },
     _idleTimeout: 120000,
     _idleNext: 
      { [Function: utcDate]
        _onTimeout: [Function],
        _idleTimeout: 669,
        _idleNext: [Object],
        _idlePrev: [Circular],
        _idleStart: 1412330012332 },
     _idlePrev: [Circular],
     _idleStart: 1412330012387,
     parser: 
      { _headers: [],
        _url: '',
        onHeaders: [Function: parserOnHeaders],
        onHeadersComplete: [Function: parserOnHeadersComplete],
        onBody: [Function: parserOnBody],
        onMessageComplete: [Function: parserOnMessageComplete],
        socket: [Circular],
        incoming: [Object],
        maxHeaderPairs: 2000,
        onIncoming: [Function] },
     ondata: [Function],
     _paused: false,
     _httpMessage: 
      { domain: null,
        _events: [Object],
        _maxListeners: 10,
        output: [],
        outputEncodings: [],
        writable: true,
        _last: false,
        chunkedEncoding: false,
        shouldKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _headerSent: false,
        _header: '',
        _hasBody: true,
        _trailer: '',
        finished: false,
        _hangupClose: false,
        socket: [Circular],
        connection: [Circular],
        _headers: [Object],
        _headerNames: [Object] } },
  _idlePrev: 
   { _idleNext: [Circular],
     _idlePrev: 
      { [Function: utcDate]
        _onTimeout: [Function],
        _idleTimeout: 669,
        _idleNext: [Circular],
        _idlePrev: [Object],
        _idleStart: 1412330012332 } },
  _idleStart: 1412330012390,
  parser: 
   { _headers: [],
     _url: '',
     onHeaders: [Function: parserOnHeaders],
     onHeadersComplete: [Function: parserOnHeadersComplete],
     onBody: [Function: parserOnBody],
     onMessageComplete: [Function: parserOnMessageComplete],
     socket: [Circular],
     incoming: 
      { _readableState: [Object],
        readable: true,
        domain: null,
        _events: {},
        _maxListeners: 10,
        socket: [Circular],
        connection: [Circular],
        httpVersion: '1.1',
        complete: false,
        headers: [Object],
        trailers: {},
        _pendings: [],
        _pendingIndex: 0,
        url: '/bookmarks',
        method: 'POST',
        statusCode: null,
        client: [Circular],
        _consuming: false,
        _dumped: false,
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        upgrade: false },
     maxHeaderPairs: 2000,
     onIncoming: [Function] },
  ondata: [Function],
  _paused: false,
  _httpMessage: 
   { domain: null,
     _events: { finish: [Function] },
     _maxListeners: 10,
     output: [],
     outputEncodings: [],
     writable: true,
     _last: false,
     chunkedEncoding: false,
     shouldKeepAlive: true,
     useChunkedEncodingByDefault: true,
     sendDate: true,
     _headerSent: false,
     _header: '',
     _hasBody: true,
     _trailer: '',
     finished: false,
     _hangupClose: false,
     socket: [Circular],
     connection: [Circular],
     _headers: { 'access-control-allow-origin': '*' },
     _headerNames: { 'access-control-allow-origin': 'Access-Control-Allow-Origin' } } } ':' 'connection'
1.1 : httpVersion
false ':' 'complete'
{ host: 'localhost:8001',
  connection: 'keep-alive',
  'content-length': '66',
  pragma: 'no-cache',
  'cache-control': 'no-cache',
  accept: 'application/json, text/plain, */*',
  origin: 'http://localhost',
  'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/37.0.2062.124 Safari/537.36',
  'content-type': 'application/x-www-form-urlencoded, application/json',
  referer: 'http://localhost/~adrien/GIT/frontend/Tests/Adrien/front-end/angular/Eggly/html/',
  'accept-encoding': 'gzip,deflate',
  'accept-language': 'en-US,en;q=0.8,fr;q=0.6' } ':' 'headers'
{} ':' 'trailers'
[] ':' '_pendings'
0 ':' '_pendingIndex'
/bookmarks : url
POST : method
null ':' 'statusCode'
{ _connecting: false,
  _handle: 
   { fd: 17,
     writeQueueSize: 0,
     owner: [Circular],
     onread: [Function: onread],
     reading: true },
  _readableState: 
   { highWaterMark: 16384,
     buffer: [],
     length: 0,
     pipes: null,
     pipesCount: 0,
     flowing: false,
     ended: false,
     endEmitted: false,
     reading: true,
     calledRead: true,
     sync: false,
     needReadable: true,
     emittedReadable: false,
     readableListening: false,
     objectMode: false,
     defaultEncoding: 'utf8',
     ranOut: false,
     awaitDrain: 0,
     readingMore: false,
     decoder: null,
     encoding: null },
  readable: true,
  domain: null,
  _events: 
   { end: { [Function: g] listener: [Function: onend] },
     finish: [Function: onSocketFinish],
     _socketEnd: [Function: onSocketEnd],
     drain: [ [Function: ondrain], [Function: socketOnDrain] ],
     timeout: [Function],
     error: [Function],
     close: 
      [ [Function: serverSocketCloseListener],
        [Function: onServerResponseClose] ] },
  _maxListeners: 10,
  _writableState: 
   { highWaterMark: 16384,
     objectMode: false,
     needDrain: false,
     ending: false,
     ended: false,
     finished: false,
     decodeStrings: false,
     defaultEncoding: 'utf8',
     length: 0,
     writing: false,
     sync: true,
     bufferProcessing: false,
     onwrite: [Function],
     writecb: null,
     writelen: 0,
     buffer: [] },
  writable: true,
  allowHalfOpen: true,
  onend: [Function],
  destroyed: false,
  errorEmitted: false,
  bytesRead: 637,
  _bytesDispatched: 0,
  _pendingData: null,
  _pendingEncoding: '',
  server: 
   { domain: null,
     _events: 
      { request: [Function],
        connection: [Function: connectionListener],
        clientError: [Function] },
     _maxListeners: 10,
     _connections: 2,
     connections: [Getter/Setter],
     _handle: 
      { fd: 11,
        writeQueueSize: 0,
        onconnection: [Function: onconnection],
        owner: [Circular] },
     _usingSlaves: false,
     _slaves: [],
     allowHalfOpen: true,
     httpAllowHalfOpen: false,
     timeout: 120000,
     _connectionKey: '4:0.0.0.0:8001' },
  _idleTimeout: 120000,
  _idleNext: 
   { _connecting: false,
     _handle: 
      { fd: 12,
        writeQueueSize: 0,
        owner: [Circular],
        onread: [Function: onread],
        reading: true },
     _readableState: 
      { highWaterMark: 16384,
        buffer: [],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: false,
        ended: false,
        endEmitted: false,
        reading: true,
        calledRead: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        objectMode: false,
        defaultEncoding: 'utf8',
        ranOut: false,
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: 
      { end: [Object],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Object],
        timeout: [Function],
        error: [Function],
        close: [Object] },
     _maxListeners: 10,
     _writableState: 
      { highWaterMark: 16384,
        objectMode: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        buffer: [] },
     writable: true,
     allowHalfOpen: true,
     onend: [Function],
     destroyed: false,
     errorEmitted: false,
     bytesRead: 977,
     _bytesDispatched: 422,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      { domain: null,
        _events: [Object],
        _maxListeners: 10,
        _connections: 2,
        connections: [Getter/Setter],
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        allowHalfOpen: true,
        httpAllowHalfOpen: false,
        timeout: 120000,
        _connectionKey: '4:0.0.0.0:8001' },
     _idleTimeout: 120000,
     _idleNext: 
      { [Function: utcDate]
        _onTimeout: [Function],
        _idleTimeout: 669,
        _idleNext: [Object],
        _idlePrev: [Circular],
        _idleStart: 1412330012332 },
     _idlePrev: [Circular],
     _idleStart: 1412330012387,
     parser: 
      { _headers: [],
        _url: '',
        onHeaders: [Function: parserOnHeaders],
        onHeadersComplete: [Function: parserOnHeadersComplete],
        onBody: [Function: parserOnBody],
        onMessageComplete: [Function: parserOnMessageComplete],
        socket: [Circular],
        incoming: [Object],
        maxHeaderPairs: 2000,
        onIncoming: [Function] },
     ondata: [Function],
     _paused: false,
     _httpMessage: 
      { domain: null,
        _events: [Object],
        _maxListeners: 10,
        output: [],
        outputEncodings: [],
        writable: true,
        _last: false,
        chunkedEncoding: false,
        shouldKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _headerSent: false,
        _header: '',
        _hasBody: true,
        _trailer: '',
        finished: false,
        _hangupClose: false,
        socket: [Circular],
        connection: [Circular],
        _headers: [Object],
        _headerNames: [Object] } },
  _idlePrev: 
   { _idleNext: [Circular],
     _idlePrev: 
      { [Function: utcDate]
        _onTimeout: [Function],
        _idleTimeout: 669,
        _idleNext: [Circular],
        _idlePrev: [Object],
        _idleStart: 1412330012332 } },
  _idleStart: 1412330012390,
  parser: 
   { _headers: [],
     _url: '',
     onHeaders: [Function: parserOnHeaders],
     onHeadersComplete: [Function: parserOnHeadersComplete],
     onBody: [Function: parserOnBody],
     onMessageComplete: [Function: parserOnMessageComplete],
     socket: [Circular],
     incoming: 
      { _readableState: [Object],
        readable: true,
        domain: null,
        _events: {},
        _maxListeners: 10,
        socket: [Circular],
        connection: [Circular],
        httpVersion: '1.1',
        complete: false,
        headers: [Object],
        trailers: {},
        _pendings: [],
        _pendingIndex: 0,
        url: '/bookmarks',
        method: 'POST',
        statusCode: null,
        client: [Circular],
        _consuming: false,
        _dumped: false,
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        upgrade: false },
     maxHeaderPairs: 2000,
     onIncoming: [Function] },
  ondata: [Function],
  _paused: false,
  _httpMessage: 
   { domain: null,
     _events: { finish: [Function] },
     _maxListeners: 10,
     output: [],
     outputEncodings: [],
     writable: true,
     _last: false,
     chunkedEncoding: false,
     shouldKeepAlive: true,
     useChunkedEncodingByDefault: true,
     sendDate: true,
     _headerSent: false,
     _header: '',
     _hasBody: true,
     _trailer: '',
     finished: false,
     _hangupClose: false,
     socket: [Circular],
     connection: [Circular],
     _headers: { 'access-control-allow-origin': '*' },
     _headerNames: { 'access-control-allow-origin': 'Access-Control-Allow-Origin' } } } ':' 'client'
false ':' '_consuming'
false ':' '_dumped'
1 ':' 'httpVersionMajor'
1 ':' 'httpVersionMinor'
false ':' 'upgrade'
[Function] ':' 'setTimeout'
[Function] ':' 'read'
[Function] ':' '_read'
[Function] ':' 'destroy'
[Function] ':' '_addHeaderLine'
[Function] ':' '_dump'
[Function] ':' 'push'
[Function] ':' 'unshift'
[Function] ':' 'setEncoding'
[Function] ':' 'pipe'
[Function] ':' 'unpipe'
[Function] ':' 'on'
[Function] ':' 'addListener'
[Function] ':' 'resume'
[Function] ':' 'pause'
[Function] ':' 'wrap'
[Function] ':' 'setMaxListeners'
[Function] ':' 'emit'
[Function] ':' 'once'
[Function] ':' 'removeListener'
[Function] ':' 'removeAllListeners'
[Function] ':' 'listeners'
